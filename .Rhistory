library(cdcfluview)
library("cdcfluview")
install.packages("cdcfluview")
install.packages("rcpp")
install.packages("Rcpp")
install.packages("xml2")
install.packages("httr")
install.packages("cdcfluview")
install.packages("httr")
install.packages("openssl")
install.packages("V8")
install.packages("curl")
install.packages("curl")
require("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
require("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
nstall.packages('RPostgreSQL', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('RPostgreSQL', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('RPostgreSQL', dependencies=TRUE, repos='http://cran.rstudio.com/')
nstall.packages('RPostgreSQL', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('RPostgreSQL', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("DBI")
install.packages('RPostgreSQL', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("RpostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
require("RPostgreSQL")
library("cdcfluview")
install.packages("cdcfluview")
install.packages("cdcfluview",dependencies = TRUE)
install.packages("cdcfluview",dependencies = TRUE)
install.packages("httr")
install.packages("openssl")
install.packages("cdcfluview",dependencies = TRUE)
install.packages("openssl",dependencies = TRUE)
install.packages("cdcfluview",dependencies = TRUE)
library("openssl")
library("cdcfluview")
if ("cdcfluview" %in% rownames(installed.packages())){
library("cdcfluview")
}else{
print("Installing cdcfluview")
install.packages("cdcfluview",repos="http://cran.rstudio.com/")
}
if ("RPostgreSQL" %in% rownames(installed.packages())){
require("RPostgreSQL")
}else{
print("Installing RPostgreSQL",repos="http://cran.us.r-project.org")
install.packages("RPostgreSQL")
}
drv <- dbDriver("PostgreSQL")
con<-dbConnect(drv,user='root',port=5432, password='w2A89MTBrtYDxq2',
host='forecast.cbaxuxrcogbx.eu-central-1.rds.amazonaws.com',
dbname='forecast')
yr=as.integer(format(Sys.Date(), "%Y"))
yyr=as.integer(format(Sys.Date(), "%Y"))-1
regionflu <- get_flu_data("HHS", sub_region=1:10, "ilinet", years=yyr:yr)
print("Getting data from database")
query="SELECT year,week,region FROM forecasts.cdc_regionaldata WHERE region='Region 10' ORDER BY year DESC, week DESC LIMIT 1;"
checkery<-dbGetQuery(con,query)
r<-regionflu[nrow(regionflu),"REGION"]
w<-regionflu[nrow(regionflu),"WEEK"]
y<-regionflu[nrow(regionflu),"YEAR"]
db.r<-as.character(checkery['region'])
db.w<-as.integer(checkery['week'])
db.y<-as.integer(checkery['year'])
if (r==db.r & w==db.w & y==db.y){
print ("Database and CDC is up to date")
print ("Updating last few weeks")
# retrieve last 2 weeks data from regionflu and insert into database
updatethese=tail(regionflu,30)
for (e in 1:nrow(updatethese))
print(paste("Update this piggie for week ",updatethese[e,4]))
update_sql=sprintf("UPDATE forecasts.cdc_regionaldata SET region_type=\'%s\', region=\'%s\', year=%i, week=%i, percent_weighted_ILI=%f, percent_unweighted_ILI=%f, age_0_4=%i, age_25_49=%i, age_25_64=\'%s\', age_5_24=%i, age_50_64=%i, age_65=%i, ili_total=%i, no_of_providers=%i, total_patients=%i WHERE week=%i AND year=%i AND region=\'%s\';",
as.character(updatethese[e,1]),
as.character(updatethese[e,2]),
as.integer(updatethese[e,3]),
as.integer(updatethese[e,4]),
as.double(updatethese[e,5]),
as.double(updatethese[e,6]),
as.integer(updatethese[e,7]),
as.integer(updatethese[e,8]),
as.character(updatethese[e,9]),
as.integer(updatethese[e,10]),
as.integer(updatethese[e,11]),
as.integer(updatethese[e,12]),
as.integer(updatethese[e,13]),
as.integer(updatethese[e,14]),
as.integer(updatethese[e,15]),
as.integer(updatethese[e,4]),
as.integer(updatethese[e,3]),
as.character(updatethese[e,2]))
# TEST: most likely remove u_sql
#u_sql<-gsub("NA","'NA'",update_sql)
dbSendQuery(con,update_sql)
}else{
print ("Somedata is missing..inserting now")
startofmissingdata<-which(regionflu$WEEK==db.w & regionflu$YEAR==db.y & regionflu$REGION==as.character(db.r))
for (f in (startofmissingdata+2):nrow(regionflu)){
print (regionflu[f,c(2,3,4)])
#print (i)
print(paste("Insert this piggie for week ",regionflu[f,4]))
insert_sql=paste("INSERT INTO forecasts.cdc_regionaldata (region_type, region, year, week, percent_weighted_ILI, percent_unweighted_ILI, age_0_4, age_25_49, age_25_64, age_5_24, age_50_64, age_65, ili_total, no_of_providers, total_patients) VALUES (\'",
as.character(regionflu[f,1]),"\', \'",
as.character(regionflu[f,2]),"\', ",
regionflu[f,3],", ",
regionflu[f,4],", ",
as.double(regionflu[f,5]),", ",
as.double(regionflu[f,6]),", ",
regionflu[f,7],", ",
regionflu[f,8],", ",
as.character(regionflu[f,9]),", ",
regionflu[f,10],", ",
regionflu[f,11],", ",
regionflu[f,12],", ",
as.integer(regionflu[f,13]),", ",
as.integer(regionflu[f,14]),", ",
as.integer(regionflu[f,15]),");",sep='')
i_sql<-gsub("NA","'NA'",insert_sql)
print (i_sql)
dbSendQuery(con,i_sql)
}
}
state_data=get_state_data(yyr:yr)
state_data=state_data[state_data$statename!='Hawaii',]
state_db.y=paste(db.y-1,'-',as.integer(strsplit(as.character(db.y),0)[[1]][2]),sep='')
state_db.y2=paste(db.y,'-',as.integer(strsplit(as.character(db.y),0)[[1]][2])+1,sep='')
state_selected_data=state_data[state_data$season==state_db.y,]
state_selected_data_2=state_data[state_data$season==state_db.y2,]
drop_sql=sprintf("DELETE FROM forecasts.cdc_statedata WHERE season=\'%s\' OR season=\'%s\'",state_db.y,state_db.y2)
dbSendQuery(con,drop_sql)
for (ist in 1:nrow(state_selected_data)){
print (sprintf("Current state: %s weekend %s",state_selected_data[ist,1],state_selected_data[ist,6]))
ins_sql=sprintf("INSERT INTO forecasts.cdc_statedata(state_name, url, website, activity_level, activity_level_label, weekend, week, season) VALUES (\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',%s,\'%s\');",state_selected_data[ist,1],state_selected_data[ist,2],state_selected_data[ist,3],state_selected_data[ist,4],state_selected_data[ist,5],state_selected_data[ist,6],state_selected_data[ist,7],state_selected_data[ist,8])
dbSendQuery(con,ins_sql)
}
if (nrow(state_selected_data_2)==0){
sprintf("No state data for %s",state_db.y2)
}else{
for (nd in 1:nrow(state_selected_data_2)){
print (sprintf("Current state: %s weekend %s",state_selected_data_2[nd,1],state_selected_data_2[nd,6]))
ins_sql=sprintf("INSERT INTO forecasts.cdc_statedata(state_name, url, website, activity_level, activity_level_label, weekend, week, season) VALUES (\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',%s,\'%s\');",state_selected_data_2[nd,1],state_selected_data_2[nd,2],state_selected_data_2[nd,3],state_selected_data_2[nd,4],state_selected_data_2[nd,5],state_selected_data_2[nd,6],state_selected_data_2[nd,7],state_selected_data_2[nd,8])
dbSendQuery(con,ins_sql)
}
}
?source
getwd()
?setwd()
setwd("/User?tariqkhaleeq/nycdsa")
setwd("/User/tariqkhaleeq/nycdsa")
setwd("/Users/tariqkhaleeq/nycdsa")
?lm
x->"Hello, here I am!"
x<-"Hello, here I am!"
y<-"tariq"
cat(x,y)
cat('\014')
cat('\014')
5/2
5%/%2
(5%/%2)^3
(5%/%2)^-3
(5/2)^-3
x<-8
class(x)
x<-'8'
class(x)
x+1
as.integer(x)+1
sample(c('A','B'),size=10, replace=FALSE)
sample(c('A','B'),size=2, replace=FALSE)
sample(c('A','B'),size=2, replace=FALSE)
sample(c('A','B'),size=2, replace=TRUE)
sample(c('A','B'),size=2, replace=TRUE)
sample(c('A','B'),size=2, replace=TRUE)
x_1<-rnorm(,length=5)
x_1<-rnorm(5)
x_1
x_2<-seq(1,10)
x_2
x_3<-x_2[1:5]
sum=x_3+x_1
x_1[3]*x_1[1]
x_1+c(1,2)
5 %/% 2
2^3
3^2
2^-3
2^(-3)
1/2
(1/2)^-3
(1/2)^3
5/2
5%/%2
?seq
seq(1:10,by=2)
seq(1,10,by=2)
seq(1,10,by=3)
seq(1,10,by=2)
seq(1,100,by=2)
seq(1,100,by=1)
seq(1,100)/2
seq(1,100)%2
seq(1,100)%/%2
seq(1,100)/2
seq(1,100)%2
seq(1,100)%%%2
seq(1,100)%/%2
seq(1,100)%%2
seq(1,100)%%2==1
seq(1,100)/2 | seq(1,100)/3
seq(1,100)/2 & seq(1,100)/3
seq(1:100,length=2)
seq(1,100,length=2)
seq(1,100,by=2)
seq(1,100)/3
x<-seq(1,100)
x
x[x%%2]
x%%2
x[x%%2==1]
x[x%%2==0]
x[x%%3==0]
x[x%%2==0 | x%%3==0]
x[x%%2==0 & x%%3==0]
rnorm(10000)
sample(rnorm(10000),replace = FALSE, length(100))
sample(rnorm(10000),replace = FALSE, size=100
)
x = rnorm(10000)
y = sample(x,replace = FALSE, size=100)
mean(x)
mean(x)-mean(y)
m1= matrix(1:6,2,3)
m1
m2=matrix(7:18,4,3)
m2
cbind(m1,m2)
rbind(m1,m2)
?data.frame()
Pet = data.frame(c(c('dog', 'cat', 'dog'),c(20, 10, 40)),row.names=c(species,weight))
Pet = data.frame(c(c('dog', 'cat', 'dog'),c(20, 10, 40)))
Pet
Pet = data.frame(c('dog', 'cat', 'dog'),c(20, 10, 40))
Pet
Pet = data.frame(c('dog', 'cat', 'dog'),c(20, 10, 40),row.names=c(species,weight))
Pet = data.frame(c('dog', 'cat', 'dog'),c(20, 10, 40),row.names=c("species","weight"))
Pet = data.frame(c('dog', 'cat', 'dog'),c(20, 10, 40),col.names=c("species","weight"))
Pet = data.frame(species=c('dog', 'cat', 'dog'),weight=c(20, 10, 40),row.names = c(species=species,weight=weight)
)
Pet = data.frame(species=c('dog', 'cat', 'dog'),weight=c(20, 10, 40))
Pet
Pet[1,]="dog"
Pet = data.frame(species=c('dog', 'cat', 'dog'),weight=c(20, 10, 40))
which(Pet[1,]=='dog')
Pet[,1,drop=F]
Pet$species=='dog'
Pet[Pet$species=='dog']
Pet[Pet$species=='dog',]
Pet=list(species=c('dog', 'cat', 'dog'),weight=c(20, 10, 40))
Pet
mean(Pet$weight)
Pet$weight+2
sd
head(iris)
sapply(iris[,1:4],sd)
lapply(iris[,1:4],sd)
